name: Gemstone CI/CD

on:
  push:
    branches: [ "main"]
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE'
      - 'PULL_REQUEST_TEMPLATE.md'
      - 'ISSUE_TEMPLATE.md'
  pull_request:
    branches: [ "main"]

permissions:
  contents: read
  id-token: write

jobs:
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged
        ports:
          - 8080:8080
          - 5050:5050

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest tox tox-gh-actions pytest
          pip install -r requirements.txt

      - name: Create log directory
        run: |
          sudo mkdir -p /app/logs
          sudo chmod -R 777 /app/logs

      - name: Configure AWS Credentials  
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      - name: Pull artifacts from DVC  # Pull the files tracked by DVC
        run: dvc pull -v

      - name: Run Unit Tests
        run: |
          pytest tests/unit

      - name: Run Integration Tests
        run: |
          pytest tests/integration

  build_and_push:
    needs: integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-south-1
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.ap-south-1.amazonaws.com  


      - name: Build and push Airflow Docker image to DockerHub and ECR
        run: |
          # Build Airflow image
          docker build -f Dockerfile.airflow -t ${{ secrets.DOCKER_USERNAME }}/airflow:${{ github.sha }} .
          # Push to DockerHub
          docker tag ${{ secrets.DOCKER_USERNAME }}/airflow:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/airflow:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/airflow:latest
          # Push to ECR
          docker tag ${{ secrets.DOCKER_USERNAME }}/airflow:${{ github.sha }} public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/airflow-app:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/airflow:latest public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/airflow-app:latest
          docker push public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/airflow-app:latest

      - name: Build and push Flask Docker image to DockerHub and ECR
        run: |
          # Build Flask image
          docker build -f Dockerfile.flask -t ${{ secrets.DOCKER_USERNAME }}/flask:${{ github.sha }} .
          # Push to DockerHub
          docker tag ${{ secrets.DOCKER_USERNAME }}/flask:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/flask:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/flask:latest
          # Push to ECR
          docker tag ${{ secrets.DOCKER_USERNAME }}/flask:${{ github.sha }} public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/flask-app:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/flask:latest public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/flask-app:latest
          docker push public.ecr.aws/${{ secrets.ECR_SECRET_ID }}/flask-app:latest